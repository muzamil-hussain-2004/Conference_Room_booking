-- 1. User Roles
CREATE TABLE roles (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL
);

-- 2. Users
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    name VARCHAR(100),
    role_id INTEGER REFERENCES roles(id),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 3. Conference Rooms
CREATE TABLE rooms (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    location VARCHAR(255),
    capacity INTEGER,
    description TEXT,
    image_url VARCHAR(255)
);

-- 4. Facilities (e.g., projector, whiteboard)
CREATE TABLE facilities (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL
);

-- 5. Room-Facility Mapping (Many-to-Many)
CREATE TABLE room_facilities (
    room_id INTEGER REFERENCES rooms(id) ON DELETE CASCADE,
    facility_id INTEGER REFERENCES facilities(id) ON DELETE CASCADE,
    PRIMARY KEY (room_id, facility_id)
);

-- 6. Bookings
CREATE TABLE bookings (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
    room_id INTEGER REFERENCES rooms(id) ON DELETE CASCADE,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    status VARCHAR(20) DEFAULT 'confirmed', -- confirmed, cancelled, etc.
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    recurrence_id INTEGER REFERENCES booking_recurrence(id)
);

-- 7. Booking Recurrence (Optional/Stretch)
CREATE TABLE booking_recurrence (
    id SERIAL PRIMARY KEY,
    recurrence_rule VARCHAR(255) -- e.g., "WEEKLY", "DAILY", etc.
);

-- 8. Notifications
CREATE TABLE notifications (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    booking_id INTEGER REFERENCES bookings(id) ON DELETE CASCADE,
    type VARCHAR(50), -- confirmation, reminder, etc.
    message TEXT,
    sent_at TIMESTAMP
);

-- 9. Audit Logs (Optional/Stretch)
CREATE TABLE audit_logs (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    action VARCHAR(100),
    details TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 10. Index to prevent double bookings (no overlap for same room)
CREATE UNIQUE INDEX no_overlap_booking
ON bookings(room_id, start_time, end_time)
WHERE status = 'confirmed';

-- (You may need to enforce no-overlap with a trigger for full protection.)

-- 11. Example: Insert default roles
INSERT INTO roles (name) VALUES ('user'), ('admin');

-- 12. Password-reset-forget

CREATE TABLE password_reset_tokens (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    token VARCHAR(255) NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    used BOOLEAN DEFAULT FALSE
);